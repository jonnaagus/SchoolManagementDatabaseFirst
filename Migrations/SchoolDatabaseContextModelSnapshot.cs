// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolManagementDatabaseFirst.Models;

#nullable disable

namespace SchoolManagementDatabaseFirst.Migrations
{
    [DbContext(typeof(SchoolDatabaseContext))]
    partial class SchoolDatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SchoolManagementDatabaseFirst.Models.Course", b =>
                {
                    b.Property<int>("CourseID")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("CourseID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("SchoolManagementDatabaseFirst.Models.Enroll", b =>
                {
                    b.Property<int>("FKCourseID")
                        .HasColumnType("int")
                        .HasColumnName("FKCourseID");

                    b.Property<int>("FKStudentID")
                        .HasColumnType("int")
                        .HasColumnName("FKStudentID");

                    b.ToTable("Enrolls");
                });

            modelBuilder.Entity("SchoolManagementDatabaseFirst.Models.GivesGrade", b =>
                {
                    b.Property<int>("FKCourseID")
                        .HasColumnType("int")
                        .HasColumnName("FKCourseID");

                    b.Property<int>("FKGradeID")
                        .HasColumnType("int")
                        .HasColumnName("FKGradeID");

                    b.Property<int?>("FKStudentID")
                        .HasColumnType("int")
                        .HasColumnName("FKStudentID");

                    b.Property<int>("FKTeacherID")
                        .HasColumnType("int")
                        .HasColumnName("FKTeacherID");

                    b.Property<DateTime?>("GradeDate")
                        .HasColumnType("datetime");

                    b.ToTable("GivesGrades");
                });

            modelBuilder.Entity("SchoolManagementDatabaseFirst.Models.Grade", b =>
                {
                    b.Property<int>("GradeID")
                        .HasColumnType("int")
                        .HasColumnName("GradeID");

                    b.Property<int>("CourseID")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<DateTime>("GradeDate")
                        .HasColumnType("date");

                    b.Property<string>("GradeValue")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.Property<int>("TeacherID")
                        .HasColumnType("int")
                        .HasColumnName("TeacherID");

                    b.Property<int>("FKCourseID")
                        .HasColumnType("int")
                        .HasColumnName("FKCourseID");

                    b.Property<int>("FKStudentID")
                        .HasColumnType("int")
                        .HasColumnName("FKStudentID");

                    b.Property<int>("FKTeacherID")
                        .HasColumnType("int")
                    .HasColumnName("FKTeacherID");

                    b.HasKey("GradeID");

                    b.HasIndex("TeacherID");

                    b.HasIndex(new[] { "CourseID" }, "IX_Grades_CourseID");

                    b.HasIndex(new[] { "StudentID" }, "IX_Grades_StudentID");

                    b.HasIndex(new[] { "TeacherID" }, "IX_Grades_TeacherID");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("SchoolManagementDatabaseFirst.Models.Principal", b =>
                {
                    b.Property<int>("PrincipalID")
                        .HasColumnType("int")
                        .HasColumnName("PrincipalID");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PrincipalID");

                    b.ToTable("Principal", (string)null);
                });

            modelBuilder.Entity("SchoolManagementDatabaseFirst.Models.Staff", b =>
                {
                    b.Property<int>("StaffID")
                        .HasColumnType("int")
                        .HasColumnName("StaffID");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,0)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("StaffID");

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("SchoolManagementDatabaseFirst.Models.Student", b =>
                {
                    b.Property<int>("StudentID")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PersonalIDNr")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("PersonalIDNr");

                    b.HasKey("StudentID");

                    b.ToTable("Student", (string)null);
                });

            modelBuilder.Entity("SchoolManagementDatabaseFirst.Models.Teacher", b =>
                {
                    b.Property<int>("TeacherID")
                        .HasColumnType("int")
                        .HasColumnName("TeacherID");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,0)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("TeacherID");

                    b.HasIndex("TeacherID")  
                        .IsUnique();         

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("SchoolManagementDatabaseFirst.Models.Grade", b =>
                {
                    b.HasOne("SchoolManagementDatabaseFirst.Models.Course", "Course")
                        .WithMany("Grades")
                        .HasForeignKey("CourseID")
                        .IsRequired();

                    b.HasOne("SchoolManagementDatabaseFirst.Models.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentID")
                        .IsRequired();

                    b.HasOne("SchoolManagementDatabaseFirst.Models.Teacher", "Teacher")
                        .WithMany("Grades")
                        .HasForeignKey("TeacherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchoolManagementDatabaseFirst.Models.Course", b =>
                {
                    b.Navigation("Grades");
                });

            modelBuilder.Entity("SchoolManagementDatabaseFirst.Models.Student", b =>
                {
                    b.Navigation("Grades");
                });

            modelBuilder.Entity("SchoolManagementDatabaseFirst.Models.Teacher", b =>
                {
                    b.Navigation("Grades");
                });
#pragma warning restore 612, 618
        }
    }
}
